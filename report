<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel File Analysis with Dynamic Descriptions</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        h1 {
            color: #4a67d6;
        }
        #fileUploadSection, #output, #additionalInfo {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        input[type="file"], button {
            border: 2px solid #4a67d6;
            padding: 8px;
            width: 98%;
            margin-bottom: 10px;
            border-radius: 4px;
            cursor: pointer;
        }
        button {
            background-color: #4a67d6;
            color: white;
            border: none;
            padding: 10px 20px;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: bold;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #365abc;
        }
        #output {
            font-size: 0.8em; /* Smaller font size for the result table */
            overflow-x: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #4a67d6;
            color: white;
        }
        .totalRow {
            font-weight: bold;
            background-color: #e8e8e8;
        }
        .bold {
            font-weight: bold;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Upload and Analyze Excel File by Account Type</h1>
    <div id="fileUploadSection">
        <input type="file" id="excelFile" accept=".xlsx,.xls">
        <button onclick="analyzeFile()">Upload and Analyze</button>
        <p>Please upload an Excel file to analyze it by account types (Expense or Revenue), with certain columns excluded. Results are grouped by the type found in Column G, with totals calculated from Column I onwards, displayed in enhanced currency format starting from 'ORIGINAL APPROP'.</p>
    </div>
    <div id="output"></div>
    <div id="additionalInfo"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <script>
        function analyzeFile() {
            var fileInput = document.getElementById('excelFile');
            if (!fileInput.files.length) {
                alert('Please select a file before clicking "Upload and Analyze"');
                return;
            }

            var file = fileInput.files[0];
            var reader = new FileReader();

            reader.onload = function(e) {
                var data = new Uint8Array(e.target.result);
                var workbook = XLSX.read(data, {type: 'array'});
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                document.getElementById('fileUploadSection').classList.add('hidden');

                let expenses = [];
                let revenues = [];
                let headers = [];
                let range = XLSX.utils.decode_range(worksheet['!ref']);
                let excludeColumns = ["ORG", "OBJ", "PROJECT", "SUB-ROLLUP", "% USED"];
                let excludedIndexes = new Set();
                let currencyColumnStartIndex = 0;

                let originalAppropIndex, transAdjustmentsIndex, revisedBudgetIndex;

                for(let R = range.s.r; R <= range.e.r; ++R) {
                    let rowData = [];
                    for(let C = range.s.c; C <= range.e.c; ++C) {
                        let cell_ref = XLSX.utils.encode_cell({c:C, r:R});
                        if(R === 0) {
                            let headerValue = worksheet[cell_ref].v;
                            headers.push(headerValue);
                            if (excludeColumns.includes(headerValue) || C === range.e.c) {
                                excludedIndexes.add(C);
                            }
                            if (headerValue === "ORIGINAL APPROP") {
                                originalAppropIndex = C;
                                currencyColumnStartIndex = C;
                            }
                            if (headerValue === "TRANFRS/ADJSMTS") {
                                transAdjustmentsIndex = C;
                            }
                            if (headerValue === "REVISED BUDGET") {
                                revisedBudgetIndex = C;
                            }
                        } else if(!excludedIndexes.has(C)) {
                            if(worksheet[cell_ref]) {
                                rowData.push(worksheet[cell_ref].v);
                            } else {
                                rowData.push("");
                            }
                        }
                    }
                    if(R !== 0) {
                        if(rowData[6 - Array.from(excludedIndexes).filter(x => x < 6).length] === 'R') {
                            revenues.push(rowData);
                        } else if(rowData[6 - Array.from(excludedIndexes).filter(x => x < 6).length] === 'E') {
                            expenses.push(rowData);
                        }
                    }
                }

                document.getElementById('output').innerHTML = `
                    <h3>Revenues:</h3>
                    ${createTable(revenues, headers.filter((_, index) => !excludedIndexes.has(index)), currencyColumnStartIndex - Array.from(excludedIndexes).filter(x => x < currencyColumnStartIndex).length)}
                    <h3>Expenses:</h3>
                    ${createTable(expenses, headers.filter((_, index) => !excludedIndexes.has(index)), currencyColumnStartIndex - Array.from(excludedIndexes).filter(x => x < currencyColumnStartIndex).length)}
                `;

                displayAdditionalInfo(revenues, originalAppropIndex - Array.from(excludedIndexes).filter(x => x < originalAppropIndex).length, transAdjustmentsIndex - Array.from(excludedIndexes).filter(x => x < transAdjustmentsIndex).length, revisedBudgetIndex - Array.from(excludedIndexes).filter(x => x < revisedBudgetIndex).length);
            };

            reader.readAsArrayBuffer(file);
        }

        function createTable(data, headers, currencyColumnStartIndex) {
            let html = "<table><thead><tr>";
            headers.forEach(header => html += `<th>${header}</th>`);
            html += "</tr></thead><tbody>";
            let totals = Array(headers.length).fill(0);

            data.forEach(row => {
                html += "<tr>";
                row.forEach((cell, index) => {
                    if (index >= currencyColumnStartIndex && !isNaN(parseFloat(cell))) {
                        html += `<td>${formatCurrency(parseFloat(cell))}</td>`;
                        totals[index] += parseFloat(cell);
                    } else {
                        html += `<td>${cell}</td>`;
                    }
                });
                html += "</tr>";
            });

            // Adding the total row
            html += "<tr class='totalRow'>";
            html += `<td>Total:</td>`; // Place "Total" only in the first column
            headers.forEach((header, index) => {
                if (index >= currencyColumnStartIndex) {
                    html += `<td>${formatCurrency(totals[index])}</td>`;
                } else if (index > 0) {
                    html += `<td></td>`; // Leave other cells empty before the currency column
                }
            });
            html += "</tr>";

            html += "</tbody></table>";
            return html;
        }

        function displayAdditionalInfo(revenues, originalAppropIndex, transAdjustmentsIndex, revisedBudgetIndex) {
            let totalOriginalApprop = revenues.reduce((sum, row) => sum + parseFloat(row[originalAppropIndex]), 0);
            let totalTransAdjustments = revenues.reduce((sum, row) => sum + parseFloat(row[transAdjustmentsIndex]), 0);
            let totalRevisedBudget = revenues.reduce((sum, row) => sum + parseFloat(row[revisedBudgetIndex]), 0);

            let additionalInfo = `
                <p>The report includes two groups of account codes: Revenue and Expense.</p>
                <ul>
                    <li><strong>Revenue codes</strong> record revenues (any deposits made into the bank account) generated by the campus.</li>
                    <li><strong>Expense codes</strong> are used to create requisitions for AF-related expenses.</li>
                </ul>
                <p><strong>Budget Overview:</strong></p>
                <ul>
                    <li>The initial budget for the campus is <strong>${formatCurrency(Math.abs(totalOriginalApprop))}</strong>, shown in column "Original Approp".</li>
                    <li>This amount is based on the actual revenues generated by the campus in the previous fiscal year,<strong>not the available cash in the bank</strong></li>
                    <li>The same budget amount was allocated to expense codes to create requisitions for expenses.</li>
            `;

            if (totalTransAdjustments < 0) {
                additionalInfo += `
                    <li>An additional budget of <strong>${formatCurrency(Math.abs(totalTransAdjustments))}</strong> was later added, bringing the revised budget to <strong>${formatCurrency(totalRevisedBudget)}</strong>. This increase was also allocated to expense codes.</li>
                `;
            }

            additionalInfo += `</ul>`;

            document.getElementById('additionalInfo').innerHTML = additionalInfo;
        }

        function formatCurrency(value) {
            return value.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD',
            });
        }
    </script>
</body>
</html>




